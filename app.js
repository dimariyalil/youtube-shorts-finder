// app.js - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

class App {
    constructor() {
        this.api = new YouTubeAPI();
        this.currentFilter = 'all';
        this.selectedQueries = new Set();
        this.init();
    }
    
    init() {
        this.setupEventListeners();
        this.loadSavedData();
        this.api.updateQuotaUI();
    }
    
    setupEventListeners() {
        // –í—ã–±–æ—Ä –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        document.querySelectorAll('.query-item').forEach(item => {
            item.addEventListener('click', (e) => this.toggleQuery(e));
        });
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        document.getElementById('searchBtn').addEventListener('click', () => this.performSearch());
        document.getElementById('analyzeBtn').addEventListener('click', () => this.analyzeResults());
        document.getElementById('exportBtn').addEventListener('click', () => this.exportResults());
        
        // –§–∏–ª—å—Ç—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.filterResults(e));
        });
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.querySelector('.close').addEventListener('click', () => this.closeModal());
        window.addEventListener('click', (e) => {
            if (e.target.id === 'videoModal') this.closeModal();
        });
    }
    
    toggleQuery(e) {
        const item = e.currentTarget;
        const isCustom = item.classList.contains('custom-query');
        
        if (isCustom) {
            const input = item.querySelector('input');
            if (input.value.trim()) {
                item.classList.toggle('active');
                if (item.classList.contains('active')) {
                    this.selectedQueries.add(input.value.trim());
                } else {
                    this.selectedQueries.delete(input.value.trim());
                }
            }
        } else {
            item.classList.toggle('active');
            const query = item.dataset.query;
            if (item.classList.contains('active')) {
                this.selectedQueries.add(query);
            } else {
                this.selectedQueries.delete(query);
            }
        }
    }
    
    async performSearch() {
        if (this.selectedQueries.size === 0) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
            return;
        }
        
        this.showLoader('–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ...');
        
        const publishedAfterDays = parseInt(document.getElementById('publishedAfter').value);
        const maxResults = parseInt(document.getElementById('maxResults').value);
        const category = document.getElementById('category').value;
        
        const options = {
            publishedAfterDays,
            maxResults
        };
        
        if (category) {
            options.videoCategoryId = category;
        }
        
        let totalFound = 0;
        const allVideoIds = [];
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        for (const query of this.selectedQueries) {
            try {
                this.updateLoader(`–ü–æ–∏—Å–∫: ${query}`);
                const results = await this.api.searchVideos(query, options);
                
                const videoIds = results.map(item => item.id.videoId);
                allVideoIds.push(...videoIds);
                totalFound += results.length;
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await this.delay(1000);
                
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ "${query}":`, error);
                this.showError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ "${query}": ${error.message}`);
            }
        }
        
        if (allVideoIds.length > 0) {
            this.updateLoader('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—Å–µ—Ö –≤–∏–¥–µ–æ
            await this.api.getVideoDetails(allVideoIds);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.api.saveToStorage();
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.displayResults();
            this.updateStats();
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            document.getElementById('analyzeBtn').disabled = false;
            document.getElementById('exportBtn').disabled = false;
        }
        
        this.hideLoader();
    }
    
    async analyzeResults() {
        this.showLoader('–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
        const allVideos = Array.from(this.api.videoDetails.values());
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ç–æ–ø –≤–∏–¥–µ–æ
        const topVideos = allVideos
            .sort((a, b) => b.stats.viralScore - a.stats.viralScore)
            .slice(0, 20);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞–π–º–∫–æ–¥–æ–≤
        
        this.hideLoader();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.showDetailedStats(allVideos);
    }
    
    displayResults() {
        const grid = document.getElementById('resultsGrid');
        grid.innerHTML = '';
        
        const videos = Array.from(this.api.videoDetails.values())
            .filter(video => this.applyFilter(video))
            .sort((a, b) => b.stats.viralScore - a.stats.viralScore);
        
        videos.forEach(video => {
            const card = this.createVideoCard(video);
            grid.appendChild(card);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏
        document.getElementById('statsPanel').style.display = 'block';
        document.getElementById('resultsSection').style.display = 'block';
    }
    
    createVideoCard(video) {
        const card = document.createElement('div');
        card.className = 'video-card';
        card.onclick = () => this.showVideoDetails(video);
        
        const badges = [];
        if (video.isViral) badges.push('<span class="viral-badge">üî• VIRAL</span>');
        
        card.innerHTML = `
            <div style="position: relative;">
                <img src="${video.thumbnail}" alt="${video.title}" class="video-thumbnail">
                <span class="video-duration">${video.duration}</span>
                ${badges.join('')}
            </div>
            <div class="video-info">
                <div class="video-title">${this.escapeHtml(video.title)}</div>
                <div class="video-channel">${this.escapeHtml(video.channel)}</div>
                <div class="video-stats">
                    <span class="video-views">${this.formatNumber(video.stats.views)} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</span>
                    <span>${video.age.days}–¥ –Ω–∞–∑–∞–¥</span>
                </div>
                <div class="video-metrics">
                    <div class="metric">
                        <span>üëç</span>
                        <span>${this.formatNumber(video.stats.likes)}</span>
                    </div>
                    <div class="metric">
                        <span>üí¨</span>
                        <span>${this.formatNumber(video.stats.comments)}</span>
                    </div>
                    <div class="metric">
                        <span>üìà</span>
                        <span>${(video.stats.engagement * 100).toFixed(1)}%</span>
                    </div>
                    <div class="metric">
                        <span>üöÄ</span>
                        <span>${video.stats.viralScore.toFixed(0)}</span>
                    </div>
                </div>
            </div>
        `;
        
        return card;
    }
    
    showVideoDetails(video) {
        const modal = document.getElementById('videoModal');
        const content = document.getElementById('modalContent');
        
        const categoryName = CONFIG.MALE_CATEGORIES[video.categoryId] || '–î—Ä—É–≥–æ–µ';
        
        content.innerHTML = `
            <h2>${this.escapeHtml(video.title)}</h2>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                <div>
                    <img src="${video.thumbnail}" style="width: 100%; border-radius: 10px;">
                </div>
                <div>
                    <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <table style="width: 100%;">
                        <tr><td>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</td><td><strong>${this.formatNumber(video.stats.views)}</strong></td></tr>
                        <tr><td>–õ–∞–π–∫–∏:</td><td><strong>${this.formatNumber(video.stats.likes)}</strong></td></tr>
                        <tr><td>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</td><td><strong>${this.formatNumber(video.stats.comments)}</strong></td></tr>
                        <tr><td>Engagement:</td><td><strong>${(video.stats.engagement * 100).toFixed(2)}%</strong></td></tr>
                        <tr><td>Like Ratio:</td><td><strong>${(video.stats.likeRatio * 100).toFixed(2)}%</strong></td></tr>
                        <tr><td>Viral Score:</td><td><strong>${video.stats.viralScore.toFixed(1)}</strong></td></tr>
                    </table>
                </div>
            </div>
            
            <div style="margin: 20px 0;">
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <p><strong>–ö–∞–Ω–∞–ª:</strong> ${this.escapeHtml(video.channel)}</p>
                <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${categoryName}</p>
                <p><strong>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</strong> ${new Date(video.publishedAt).toLocaleString('ru')}</p>
                <p><strong>–í–æ–∑—Ä–∞—Å—Ç:</strong> ${video.age.days} –¥–Ω–µ–π (${video.age.hours} —á–∞—Å–æ–≤)</p>
                <p><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${video.duration}</p>
            </div>
            
            ${video.tags.length > 0 ? `
                <div style="margin: 20px 0;">
                    <h3>–¢–µ–≥–∏</h3>
                    <div style="display: flex; flex-wrap: wrap; gap: 10px;">
                        ${video.tags.slice(0, 20).map(tag => 
                            `<span style="background: #f0f0f0; padding: 5px 10px; border-radius: 5px;">${this.escapeHtml(tag)}</span>`
                        ).join('')}
                    </div>
                </div>
            ` : ''}
            
            <div style="margin: 20px 0;">
                <h3>–û–ø–∏—Å–∞–Ω–∏–µ</h3>
                <p style="white-space: pre-wrap;">${this.escapeHtml(video.description.substring(0, 500))}...</p>
            </div>
            
            <div style="margin: 20px 0; display: flex; gap: 10px;">
                <a href="https://youtube.com/watch?v=${video.id}" target="_blank" 
                   style="padding: 10px 20px; background: #ff0000; color: white; text-decoration: none; border-radius: 5px;">
                    –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ YouTube
                </a>
                <a href="https://youtube.com/channel/${video.channelId}" target="_blank"
                   style="padding: 10px 20px; background: #333; color: white; text-decoration: none; border-radius: 5px;">
                    –û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª
                </a>
            </div>
        `;
        
        modal.style.display = 'block';
    }
    
    closeModal() {
        document.getElementById('videoModal').style.display = 'none';
    }
    
    updateStats() {
        const videos = Array.from(this.api.videoDetails.values());
        
        if (videos.length === 0) return;
        
        const viralCount = videos.filter(v => v.stats.views > 100000).length;
        const totalViews = videos.reduce((sum, v) => sum + v.stats.views, 0);
        const avgViews = Math.round(totalViews / videos.length);
        const avgEngagement = videos.reduce((sum, v) => sum + v.stats.engagement, 0) / videos.length;
        
        document.getElementById('totalFound').textContent = videos.length;
        document.getElementById('viralCount').textContent = viralCount;
        document.getElementById('avgViews').textContent = this.formatNumber(avgViews);
        document.getElementById('avgEngagement').textContent = (avgEngagement * 100).toFixed(1) + '%';
    }
    
    showDetailedStats(videos) {
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const byCategory = {};
        videos.forEach(video => {
            const category = CONFIG.MALE_CATEGORIES[video.categoryId] || '–î—Ä—É–≥–æ–µ';
            if (!byCategory[category]) {
                byCategory[category] = [];
            }
            byCategory[category].push(video);
        });
        
        // –¢–æ–ø –∫–∞–Ω–∞–ª—ã
        const byChannel = {};
        videos.forEach(video => {
            if (!byChannel[video.channel]) {
                byChannel[video.channel] = [];
            }
            byChannel[video.channel].push(video);
        });
        
        const topChannels = Object.entries(byChannel)
            .sort((a, b) => b[1].length - a[1].length)
            .slice(0, 10);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:', byCategory);
        console.log('–¢–æ–ø –∫–∞–Ω–∞–ª—ã:', topChannels);
        
        alert(`–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–í—Å–µ–≥–æ –≤–∏–¥–µ–æ: ${videos.length}\n\n–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n${
            Object.entries(byCategory)
                .map(([cat, vids]) => `${cat}: ${vids.length} –≤–∏–¥–µ–æ`)
                .join('\n')
        }\n\n–¢–æ–ø –∫–∞–Ω–∞–ª—ã:\n${
            topChannels
                .map(([channel, vids]) => `${channel}: ${vids.length} –≤–∏–¥–µ–æ`)
                .join('\n')
        }`);
    }
    
    filterResults(e) {
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        e.target.classList.add('active');
        
        this.currentFilter = e.target.dataset.filter;
        this.displayResults();
    }
    
    applyFilter(video) {
        switch(this.currentFilter) {
            case 'viral':
                return video.isViral;
            case 'high':
                return video.isHighEngagement;
            case 'fresh':
                return video.isFresh;
            default:
                return true;
        }
    }
    
    exportResults() {
        const data = this.api.exportResults();
        alert(`–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.videos.length} –≤–∏–¥–µ–æ!\n–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`);
    }
    
    loadSavedData() {
        const saved = this.api.loadFromStorage();
        if (saved && saved.videoDetails && saved.videoDetails.length > 0) {
            this.displayResults();
            this.updateStats();
            document.getElementById('analyzeBtn').disabled = false;
            document.getElementById('exportBtn').disabled = false;
        }
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã
    formatNumber(num) {
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    showLoader(message) {
        document.getElementById('loader').style.display = 'block';
        document.querySelector('.loader p').textContent = message;
    }
    
    updateLoader(message) {
        document.querySelector('.loader p').textContent = message;
    }
    
    hideLoader() {
        document.getElementById('loader').style.display = 'none';
    }
    
    showError(message) {
        alert('–û—à–∏–±–∫–∞: ' + message);
    }
    
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.app = new App();
});